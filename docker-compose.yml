
services:
  traefik:
    image: traefik:v3.0
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --log.level=INFO
      - --accesslog=true
      - --entryPoints.web.transport.respondingTimeouts.readTimeout=10s
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik-prod
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    depends_on:
      - app
      - web

  app:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env.production
    environment:
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=production
    command: sh -c "python -m pytest tests/units/test_fill_db_with_data.py::test_fill_database_with_test_data -v && uvicorn src.main:app --host 0.0.0.0 --port 8000"
    restart: always
    depends_on:
      db:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/products')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - traefik.enable=true
      - traefik.http.routers.app.rule=PathPrefix(`/api`)
      - traefik.http.routers.app.entrypoints=web
      - traefik.http.routers.app.priority=100
      - traefik.http.services.app.loadbalancer.server.port=8000
    networks:
      - traefik-prod
    expose:
      - "8000"  # Expose app on port 8000
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.75'

  db:
    image: postgres:13
    env_file:
      - .env.production
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}  # Use the actual database name instead of postgres
      - DB_NAME=${DB_NAME}    # Pass DB_NAME to init script
    ports:
        - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    restart: always
    networks:
      - traefik-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'

  web:
    build: ./frontend
    env_file:
      - .env.production
    command: pnpm start
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - traefik.enable=true
      - traefik.http.routers.web.rule=PathPrefix(`/`) && !PathPrefix(`/api`)
      - traefik.http.routers.web.entrypoints=web
      - traefik.http.routers.web.priority=10
      - traefik.http.services.web.loadbalancer.server.port=3000
    networks:
      - traefik-prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

volumes:
  postgres_data_prod:
  node_modules_cache_prod:
  nextjs_cache_prod:

networks:
  traefik-prod:
    driver: bridge
